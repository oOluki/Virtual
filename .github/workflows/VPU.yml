# This was created by modifing github's 'CMake on multiple platforms'
name: VFE

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # reference: https://github.com/danielzsh/spark/blob/master/.github/workflows/compile.yml
  windows-build:
    runs-on: 'windows-latest'

    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1.4.1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo build dir = ${{ github.workspace }}/Virtual\ Processing\ Unit/build
        echo example dir = ${{ github.workspace }}/Virtual\ Processing\ Unit/build/examples
        echo "build-output-dir=${{ github.workspace }}/Virtual\ Processing\ Unit/build" >> "$GITHUB_OUTPUT"
        echo "examples-dir=${{ github.workspace }}/Virtual\ Processing\ Unit/build/examples" >> "$GITHUB_OUTPUT"

    - name: Build (Windows)
      run: |
        mkdir ${{ steps.strings.outputs.build-output-dir }}

        cl ${{ github.workspace }}/Virtual\ Processing\ Unit/compiler.c /Fe:${{ steps.strings.outputs.build-output-dir }}/compile
        cl ${{ github.workspace }}/Virtual\ Processing\ Unit/vpu.c /Fe:${{ steps.strings.outputs.build-output-dir }}/VPU
    

    - name: Test (Windows)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: pwsh
      run: |
        mkdir examples

        $files = Get-ChildItem -Path ..\examples\*.fiction
        foreach ($file in $files) {
            if ($file.Extension -eq ".fiction") {
              $filename_without_extension = [System.IO.Path]::GetFileNameWithoutExtension($file.FullName)
              echo $filename_without_extension example
              .\compile $file.FullName -o "examples/$filename_without_extension.bin"
              .\VPU "examples/$filename_without_extension.bin"
            }            
        }
      



  linux-macos-build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/Virtual\ Processing\ Unit/build" >> "$GITHUB_OUTPUT"
        echo "examples-dir=${{ github.workspace }}/Virtual\ Processing\ Unit/examples" >> "$GITHUB_OUTPUT"

    - name: Build (Linux and MacOS)
      run: |
        mkdir ${{ steps.strings.outputs.build-output-dir }}
        ${{ matrix.c_compiler }} ${{ github.workspace }}/Virtual\ Processing\ Unit/src/compiler.c -o ${{ steps.strings.outputs.build-output-dir }}/compiler
        ${{ matrix.c_compiler }} ${{ github.workspace }}/Virtual\ Processing\ Unit/src/vpu.c -o ${{ steps.strings.outputs.build-output-dir }}/VPU
      
    - name: Test (Linux and MacOS)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        mkdir -p examples

        for file in ../examples/*; do
        
          filename="${file%.*}"
          extension="${file##*.}"

          if [[ "$extension" == "fiction" ]]; then
            echo "$filename" example
            ./compile "../examples/$file" "examples/$(basename "$filename").virtual"
            ./VPU "examples/$(basename "$filename").virtual"
            
          fi

        done

